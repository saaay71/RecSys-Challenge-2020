{"paragraphs":[{"text":"%pyspark\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom pyspark.sql import SQLContext\nfrom pyspark.sql import functions as F\nfrom pyspark.sql import types as T\nfrom pyspark.sql import Row\nfrom pyspark.sql.window import Window\n\nfrom transformers import BertTokenizer\ntokenizer = BertTokenizer.from_pretrained('bert-base-multilingual-cased', do_lower_case=False)\n\n@F.udf(\"String\")\ndef decode_tokens(tokens):\n  return tokenizer.decode(tokens)\n\nsqc = SQLContext(sc)","user":"anonymous","dateUpdated":"2020-06-14T17:49:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592156306023_986737831","id":"20200614-173826_2115406460","dateCreated":"2020-06-14T17:38:26+0000","dateStarted":"2020-06-14T17:49:28+0000","dateFinished":"2020-06-14T17:49:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22290"},{"text":"%pyspark\nroot_file_path = \"/nas_ssd_social_media_analytics/ali_twitter/final_dataset_12062020/temp/\"\ntraining_parquet_path = root_file_path+\"training_df\"\nvalidation_parquet_path = root_file_path+\"val_df\"\ntest_parquet_path = root_file_path+\"test_df\"\n\ntraining_df = sqc.read.parquet(training_parquet_path)\nvalidation_df = sqc.read.parquet(validation_parquet_path)\ntest_df = sqc.read.parquet(test_parquet_path)","user":"anonymous","dateUpdated":"2020-06-14T17:49:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592156321212_2112976440","id":"20200614-173841_1778668290","dateCreated":"2020-06-14T17:38:41+0000","dateStarted":"2020-06-14T17:49:30+0000","dateFinished":"2020-06-14T17:49:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22291"},{"title":"Preparing training dataset","text":"%pyspark\n# .withColumn(\"reply\", F.when(F.col(\"reply_engagement_timestamp\").isNull(), 0).otherwise(1))\\\n# .withColumn(\"retweet\", F.when(F.col(\"retweet_engagement_timestamp\").isNull(), 0).otherwise(1))\\\n# .withColumn(\"rtWithCmt\", F.when(F.col(\"retweet_with_comment_engagement_timestamp\").isNull(), 0).otherwise(1))\\\n# .withColumn(\"like\", F.when(F.col(\"like_engagement_timestamp\").isNull(), 0).otherwise(1))\\\n\ntraining_engager_user_df = training_df\\\n.dropDuplicates([\"engager_user_id\"])\\\n.select(\"engager_user_id\", \"engager_follower_count\", \"engager_following_count\", \"engager_is_verified\", \"engager_account_creation_time\")\\\n.withColumn(\"engager_is_verified\", F.col(\"engager_is_verified\").cast(T.IntegerType()))\\\n.withColumn(\"year_engager\", F.hour(F.to_timestamp(\"engager_account_creation_time\")))\\\n.withColumn(\"is_bot_engager\", F.when(((F.col(\"engager_following_count\") < 4700) | (F.col(\"engager_following_count\") > 5100)), 0).otherwise(1))\n\ntraining_engager_user_df.write.parquet(root_file_path+\"training_engager_user_df.parquet\")\n\ntraining_engagee_user_df = training_df\\\n.dropDuplicates([\"engagee_user_id\"])\\\n.select(\"engagee_user_id\", \"engagee_follower_count\", \"engagee_following_count\", \"engagee_is_verified\", \"engagee_account_creation_time\")\\\n.withColumn(\"engagee_is_verified\", F.col(\"engagee_is_verified\").cast(T.IntegerType()))\\\n.withColumn(\"year_engagee\", F.hour(F.to_timestamp(\"engagee_account_creation_time\")))\\\n.withColumn(\"is_bot_engagee\", F.when(((F.col(\"engagee_following_count\") < 4700) | (F.col(\"engagee_following_count\") > 5100)), 0).otherwise(1))\n\ntraining_engagee_user_df.write.parquet(root_file_path+\"training_engagee_user_df.parquet\")\n","user":"anonymous","dateUpdated":"2020-06-14T18:38:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592156447099_1925124645","id":"20200614-174047_432409949","dateCreated":"2020-06-14T17:40:47+0000","dateStarted":"2020-06-14T18:38:23+0000","dateFinished":"2020-06-14T18:40:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22292"},{"title":"Preparing validation dataset","text":"%pyspark\n\nvalidation_engager_user_df = validation_df\\\n.dropDuplicates([\"engager_user_id\"])\\\n.select(\"engager_user_id\", \"engager_follower_count\", \"engager_following_count\", \"engager_is_verified\", \"engager_account_creation_time\")\\\n.withColumn(\"engager_is_verified\", F.col(\"engager_is_verified\").cast(T.IntegerType()))\\\n.withColumn(\"year_engager\", F.hour(F.to_timestamp(\"engager_account_creation_time\")))\\\n.withColumn(\"is_bot_engager\", F.when(((F.col(\"engager_following_count\") < 4700) | (F.col(\"engager_following_count\") > 5100)), 0).otherwise(1))\n\nvalidation_engager_user_df.write.parquet(root_file_path+\"validation_engager_user_df.parquet\")\n\nvalidation_engagee_user_df = validation_df\\\n.dropDuplicates([\"engagee_user_id\"])\\\n.select(\"engagee_user_id\", \"engagee_follower_count\", \"engagee_following_count\", \"engagee_is_verified\", \"engagee_account_creation_time\")\\\n.withColumn(\"engagee_is_verified\", F.col(\"engagee_is_verified\").cast(T.IntegerType()))\\\n.withColumn(\"year_engagee\", F.hour(F.to_timestamp(\"engagee_account_creation_time\")))\\\n.withColumn(\"is_bot_engagee\", F.when(((F.col(\"engagee_following_count\") < 4700) | (F.col(\"engagee_following_count\") > 5100)), 0).otherwise(1))\n\nvalidation_engagee_user_df.write.parquet(root_file_path+\"validation_engagee_user_df.parquet\")","user":"anonymous","dateUpdated":"2020-06-14T18:38:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592156961072_1758407707","id":"20200614-174921_922185397","dateCreated":"2020-06-14T17:49:21+0000","dateStarted":"2020-06-14T18:38:28+0000","dateFinished":"2020-06-14T18:40:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22293"},{"title":"Preparing test dataset","text":"%pyspark\n\ntest_engager_user_df = test_df\\\n.dropDuplicates([\"engager_user_id\"])\\\n.select(\"engager_user_id\", \"engager_follower_count\", \"engager_following_count\", \"engager_is_verified\", \"engager_account_creation_time\")\\\n.withColumn(\"engager_is_verified\", F.col(\"engager_is_verified\").cast(T.IntegerType()))\\\n.withColumn(\"year_engager\", F.hour(F.to_timestamp(\"engager_account_creation_time\")))\\\n.withColumn(\"is_bot_engager\", F.when(((F.col(\"engager_following_count\") < 4700) | (F.col(\"engager_following_count\") > 5100)), 0).otherwise(1))\n\ntest_engager_user_df.write.parquet(root_file_path+\"test_engager_user_df.parquet\")\n\ntest_engagee_user_df = test_df\\\n.dropDuplicates([\"engagee_user_id\"])\\\n.select(\"engagee_user_id\", \"engagee_follower_count\", \"engagee_following_count\", \"engagee_is_verified\", \"engagee_account_creation_time\")\\\n.withColumn(\"engagee_is_verified\", F.col(\"engagee_is_verified\").cast(T.IntegerType()))\\\n.withColumn(\"year_engagee\", F.hour(F.to_timestamp(\"engagee_account_creation_time\")))\\\n.withColumn(\"is_bot_engagee\", F.when(((F.col(\"engagee_following_count\") < 4700) | (F.col(\"engagee_following_count\") > 5100)), 0).otherwise(1))\n\ntest_engagee_user_df.write.parquet(root_file_path+\"test_engagee_user_df.parquet\")\n","user":"anonymous","dateUpdated":"2020-06-14T18:38:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592157240942_1934511906","id":"20200614-175400_2135459207","dateCreated":"2020-06-14T17:54:00+0000","dateStarted":"2020-06-14T18:40:05+0000","dateFinished":"2020-06-14T18:40:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22294"},{"title":"Engager Features","text":"%pyspark\nfrom pyspark.ml.feature import QuantileDiscretizer, OneHotEncoderEstimator, VectorAssembler, StringIndexer, FeatureHasher\nfrom pyspark.ml import Pipeline\n\n# engager_user_df = training_df.dropDuplicates([\"engager_user_id\"]).select(\"engager_user_id\", \"engager_follower_count\", \"engager_following_count\", \"engager_is_verified\", \"engager_account_creation_time\")\n# engager_user_df = engager_user_df.withColumn(\"year_engager\", F.hour(F.to_timestamp(\"engager_account_creation_time\")))\n\nstages = [] # stages in our Pipeline\nnumericalColumns = [\"engager_follower_count\", \"engager_following_count\"]\nfor numericalCol in numericalColumns:\n    # stages += [QuantileDiscretizer(numBuckets=50, handleInvalid=\"keep\", inputCol=numericalCol, outputCol=numericalCol + \"Bucket\")]\n    qd = QuantileDiscretizer(numBuckets=50, handleInvalid=\"keep\", inputCol=numericalCol, outputCol=numericalCol + \"Bucket\")\n    encoder = OneHotEncoderEstimator(inputCols=[qd.getOutputCol()], outputCols=[numericalCol + \"classVec\"])\n    stages += [qd, encoder]\n\n# stages = [] # stages in second Pipeline\ncategoricalColumns = [\"year_engager\", \"engager_is_verified\", \"is_bot_engager\"]\nfor categoricalCol in categoricalColumns:\n    # Category Indexing with StringIndexer\n    stringIndexer = StringIndexer(inputCol=categoricalCol, outputCol=categoricalCol + \"Index\")\n    # Use OneHotEncoder to convert categorical variables into binary SparseVectors\n    # encoder = OneHotEncoderEstimator(inputCol=categoricalCol + \"Index\", outputCol=categoricalCol + \"classVec\")\n    encoder = OneHotEncoderEstimator(inputCols=[stringIndexer.getOutputCol()], outputCols=[categoricalCol + \"classVec\"])\n    # Add stages.  These are not run here, but will run all at once later on.\n    stages += [stringIndexer, encoder]\n    \n# pipeline2 = Pipeline(stages=stages)\n\n# assemblerInputs = [\"engager_follower_countclassVec\", \"engager_following_countclassVec\", \"year_engagerclassVec\", \"engager_is_verifiedclassVec\", \"is_bot_engagerclassVec\"]\n# assembler = VectorAssembler(inputCols=assemblerInputs, outputCol=\"featuresAssembled\")\n# stages += [assembler]\n\nfeatInputs = [c + \"Bucket\" for c in numericalColumns]\nfeatInputs += [\"year_engagerIndex\", \"engager_is_verifiedIndex\", \"is_bot_engager\"]\nstages += [FeatureHasher(numFeatures=16, inputCols=featInputs, outputCol=\"engager_features\", categoricalCols=featInputs)]\n\n\nengager_user_features = Pipeline(stages=stages).fit(training_engager_user_df)\nengager_user_features.transform(training_engager_user_df).select(\"engager_user_id\", \"engager_features\").show()","user":"anonymous","dateUpdated":"2020-06-14T18:47:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+\n|     engager_user_id|    engager_features|\n+--------------------+--------------------+\n|2DCA2F73213C2FE7E...|(16,[7,10,11,15],...|\n|49C7A9A288F881D9E...|(16,[1,6,7,8,11],...|\n|7828450C3DEB45EC7...|(16,[1,6,7,10,11]...|\n|8E8ACEB4D9725A66A...|(16,[0,1,7,11,12]...|\n|367E48B6543F4F416...|(16,[1,4,7,11,12]...|\n|2F6BF7E3FF31277A3...|(16,[2,3,7,11,15]...|\n|D223B94162F3D70F2...|(16,[6,7,11,12,15...|\n|67D87E51D259E82FA...|(16,[1,8,10,11,15...|\n|B2F25D79110A380D0...|(16,[4,6,7,11],[1...|\n|853AE192B1ABD7645...|(16,[2,7,11,12,15...|\n|B1983ED67CF9CC22B...|(16,[4,7,10,11,12...|\n|B809CC3387A227C3D...|(16,[1,8,9,10,11]...|\n|51F4D01B7342672B0...|(16,[1,10,11,12,1...|\n|2D45749D6A64B0ECB...|(16,[1,7,11,12],[...|\n|660E000404890F780...|(16,[5,7,11,12],[...|\n|2876D55842ED9C472...|(16,[7,10,11,15],...|\n|BEDDB8E1AC1F29D81...|(16,[1,7,11,12],[...|\n|15D5366F2EC9AE3CB...|(16,[1,6,8,10,11]...|\n|213C8D2A60DC490F3...|(16,[3,7,9,11,12]...|\n|18AB915AABDB8140B...|(16,[2,7,11,12,14...|\n+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1592159167521_475317314","id":"20200614-182607_643299571","dateCreated":"2020-06-14T18:26:07+0000","dateStarted":"2020-06-14T18:47:05+0000","dateFinished":"2020-06-14T18:50:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22295"},{"text":"%pyspark\nfrom pyspark.ml.feature import QuantileDiscretizer, OneHotEncoderEstimator, VectorAssembler, FeatureHasher\nfrom pyspark.ml import Pipeline\n\n# engager_user_df = training_df.dropDuplicates([\"engager_user_id\"]).select(\"engager_user_id\", \"engager_follower_count\", \"engager_following_count\", \"engager_is_verified\", \"engager_account_creation_time\")\n# engager_user_df = engager_user_df.withColumn(\"year_engager\", F.hour(F.to_timestamp(\"engager_account_creation_time\")))\n\nstages = [] # stages in our Pipeline\nnumericalColumns = [\"engagee_follower_count\", \"engagee_following_count\"]\nfor numericalCol in numericalColumns:\n    # stages += [QuantileDiscretizer(numBuckets=50, handleInvalid=\"keep\", inputCol=numericalCol, outputCol=numericalCol + \"Bucket\")]\n    qd = QuantileDiscretizer(numBuckets=50, handleInvalid=\"keep\", inputCol=numericalCol, outputCol=numericalCol + \"Bucket\")\n    encoder = OneHotEncoderEstimator(inputCols=[qd.getOutputCol()], outputCols=[numericalCol + \"classVec\"])\n    stages += [qd, encoder]\n\n# stages = [] # stages in second Pipeline\ncategoricalColumns = [\"year_engagee\", \"engagee_is_verified\", \"is_bot_engagee\"]\nfor categoricalCol in categoricalColumns:\n    # Category Indexing with StringIndexer\n    stringIndexer = StringIndexer(inputCol=categoricalCol, outputCol=categoricalCol + \"Index\")\n    # Use OneHotEncoder to convert categorical variables into binary SparseVectors\n    # encoder = OneHotEncoderEstimator(inputCol=categoricalCol + \"Index\", outputCol=categoricalCol + \"classVec\")\n    encoder = OneHotEncoderEstimator(inputCols=[stringIndexer.getOutputCol()], outputCols=[categoricalCol + \"classVec\"])\n    # Add stages.  These are not run here, but will run all at once later on.\n    stages += [stringIndexer, encoder]\n    \n# pipeline2 = Pipeline(stages=stages)\n\n# assemblerInputs = [\"engagee_follower_countclassVec\", \"engagee_following_countclassVec\", \"year_engageeclassVec\", \"engagee_is_verifiedclassVec\", \"is_bot_engageeclassVec\"]\n# assembler = VectorAssembler(inputCols=assemblerInputs, outputCol=\"featuresAssembled\")\n# stages += [assembler]\n\nfeatInputs = [c + \"Bucket\" for c in numericalColumns]\nfeatInputs += [\"year_engageeIndex\", \"engagee_is_verifiedIndex\", \"is_bot_engageeIndex\"]\nstages += [FeatureHasher(numFeatures=16, inputCols=featInputs, outputCol=\"engagee_features\", categoricalCols=featInputs)]\n\n\nengagee_user_features = Pipeline(stages=stages).fit(training_engagee_user_df)\nengagee_user_features.transform(training_engagee_user_df).select(\"engagee_user_id\", \"engagee_features\")","user":"anonymous","dateUpdated":"2020-06-14T19:05:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+\n|     engagee_user_id|    engagee_features|\n+--------------------+--------------------+\n|43BB0CFCBAB48B4B6...|(16,[0,5,7,11,14]...|\n|43BE864CF2A3C71A8...|(16,[0,7,8,14],[1...|\n|43C33610ECC34F980...|(16,[6,7,9,14],[1...|\n|43C50695EE0232F15...|(16,[0,1,6,7,14],...|\n|43C97BB1CD8F367FD...|(16,[3,7,8,13,14]...|\n|43C9ECB2693D9DD5E...|(16,[0,1,7,14],[1...|\n|43D0162A975F3675E...|(16,[3,7,8,12,14]...|\n|43DAF214E24A02F30...|(16,[7,11,13,14],...|\n|43E140AB78167C6B4...|(16,[7,9,10,14],[...|\n|43E168E436173B5E1...|(16,[7,9,12,14],[...|\n|43E9F425BB00BFBA3...|(16,[7,11,14],[2....|\n|43ED6C5482BC9486C...|(16,[2,7,13,14],[...|\n|43EDDEAF017FFCC7A...|(16,[0,7,11,12,14...|\n|43F38DE873742C739...|(16,[7,9,12,14],[...|\n|43F4CA4D814002378...|(16,[2,4,7,12,14]...|\n|43F98AE0922F98515...|(16,[0,2,7,14],[1...|\n|43FAD814C88DB9E70...|(16,[6,7,12,14,15...|\n|43FB90337B082A72B...|(16,[6,7,11,14],[...|\n|43FF053B937305171...|(16,[3,5,7,14],[1...|\n|43FFB9EAF5A4626B9...|(16,[7,10,14],[2....|\n+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1592160022483_-1121010221","id":"20200614-184022_2026917626","dateCreated":"2020-06-14T18:40:22+0000","dateStarted":"2020-06-14T18:56:29+0000","dateFinished":"2020-06-14T19:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22296"},{"text":"%pyspark\nengager_user_features.save(root_file_path+\"create_engager_user_features_model\")\nengagee_user_features.save(root_file_path+\"create_engagee_user_features_model\")","user":"anonymous","dateUpdated":"2020-06-14T19:06:36+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592161567518_1181966525","id":"20200614-190607_61914571","dateCreated":"2020-06-14T19:06:07+0000","dateStarted":"2020-06-14T19:06:36+0000","dateFinished":"2020-06-14T19:06:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22297"},{"text":"%pyspark\nfrom pyspark.ml import PipelineModel\nengager_user_features = PipelineModel.load(root_file_path+\"create_engager_user_features_model\")\nengagee_user_features = PipelineModel.load(root_file_path+\"create_engagee_user_features_model\")","user":"anonymous","dateUpdated":"2020-06-14T19:07:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592161596059_800839553","id":"20200614-190636_1899989110","dateCreated":"2020-06-14T19:06:36+0000","dateStarted":"2020-06-14T19:07:13+0000","dateFinished":"2020-06-14T19:07:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22298"},{"title":"Create engager and engagee features on test data","text":"%pyspark\nengager_user_features.transform(test_engager_user_df).select(\"engager_user_id\", \"engager_features\").show()\nengagee_user_features.transform(test_engagee_user_df).select(\"engagee_user_id\", \"engagee_features\").show()","user":"anonymous","dateUpdated":"2020-06-14T19:08:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+\n|     engager_user_id|    engager_features|\n+--------------------+--------------------+\n|136A7D07AD12EC6A4...|(16,[1,7,10,11,12...|\n|5134EF4B58DBA7294...|(16,[1,7,10,11,12...|\n|E69F9A2AA25D4ACB6...|(16,[7,11,12,13,1...|\n|BEDDB8E1AC1F29D81...|(16,[1,7,11,12],[...|\n|41B430FF0573B1B6F...|(16,[3,4,7,10,11]...|\n|F8110EF04C09E279A...|(16,[6,7,11,14],[...|\n|0A6CE37510678C4AB...|(16,[1,6,10,11,12...|\n|2B46B9676770CB094...|(16,[0,2,7,11],[1...|\n|04C8E74C40022C70A...|(16,[1,7,8,11,12]...|\n|7504F176B55181834...|(16,[1,2,7,11,12]...|\n|6100AEA96336A3737...|(16,[1,6,7,10,11]...|\n|830CFDEDC094EE309...|(16,[3,4,7,11],[1...|\n|0E1BC2A18688E3D8F...|(16,[7,11,12,15],...|\n|72BEE8ED3D81BF51A...|(16,[1,6,7,8,11],...|\n|B351A33203878CE65...|(16,[1,3,4,7,11],...|\n|1FAE7F3FDD084DF1C...|(16,[10,11,12,15]...|\n|B809CC3387A227C3D...|(16,[1,8,9,10,11]...|\n|10602E8CD1D64982A...|(16,[6,7,10,11],[...|\n|FBD4291B615CF5194...|(16,[0,3,4,7,11],...|\n|56ED9A92EF8E8E172...|(16,[2,4,7,11,12]...|\n+--------------------+--------------------+\nonly showing top 20 rows\n\n+--------------------+--------------------+\n|     engagee_user_id|    engagee_features|\n+--------------------+--------------------+\n|BD53ED141E2969428...|(16,[7,10,11,13,1...|\n|BD5A41D7685B6DBF2...|(16,[2,7,12,13,14...|\n|BD5B0FC54DCEF7AAD...|(16,[3,7,8,14],[2...|\n|BD64B4DD6E4CDCA56...|(16,[6,7,12,14],[...|\n|BD660F149F336BB57...|(16,[7,9,11,14],[...|\n|BD66C8B0815688FE8...|(16,[2,7,13,14,15...|\n|BD6DBE33E43A45600...|(16,[7,12,13,14],...|\n|BD75EBDD55B3227B3...|(16,[6,7,13,14],[...|\n|BD7B10BEB3A57CF3A...|(16,[6,7,10,14,15...|\n|BD7C91BE8A3814FFA...|(16,[7,12,14],[2....|\n|BD7E1B1DBAE942D38...|(16,[3,7,13,14,15...|\n|BD806542C6B89AA91...|(16,[3,7,9,11,14]...|\n|BD80A73D5C2339207...|(16,[0,7,12,13,14...|\n|BD82E831A11560222...|(16,[1,3,7,11,14]...|\n|BD868FC89568BE19A...|(16,[4,5,7,9,14],...|\n|BD86A14726E93BB60...|(16,[0,7,10,13,14...|\n|BD86F789F9F79710F...|(16,[0,2,7,14],[1...|\n|BD8BBD43D960C2C45...|(16,[5,7,11,12,14...|\n|BDA3ED651FDBF8D31...|(16,[0,7,13,14],[...|\n|BDAA9F13A8D5C03BB...|(16,[6,7,9,12,14]...|\n+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1592161633279_-1829712428","id":"20200614-190713_1858221342","dateCreated":"2020-06-14T19:07:13+0000","dateStarted":"2020-06-14T19:08:33+0000","dateFinished":"2020-06-14T19:08:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22299"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-06-14T19:08:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592161698653_-1488640716","id":"20200614-190818_1225092560","dateCreated":"2020-06-14T19:08:18+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:22300"}],"name":"ali/twitter/final/30_user_features","id":"2FDCDN1GX","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}